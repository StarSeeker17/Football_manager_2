@model Match
@{
    ViewBag.Title = "GameSession";                                                                                  
}
<html>
<head>
    <title>Football Game</title>
    <style>
        /* Style the scoreboard */
        .scoreboard {
            display: flex;
            justify-content: space-around;
            align-items: center;
            background-color: #000099;
            color: white;
            font-size: 2em;
            padding: 1em;
            border:1px;
            border-color: white;
            border-style: solid;
        }

        /* Style the team names */
        .team {
            font-weight: bold;
            text-align: center;
            width: 33.33%;
        }

        /* Style the event column */
        .event-column {
            border: 1px solid black;
            height: 500px;
            overflow-y: scroll;
            padding: 1em;
            margin-top: 1em;
        }

        /* Style individual events */
        .event {
            margin-bottom: 1em;
        }

        .goal {
            margin-bottom: 1em;
            color: darkturquoise;
        }

        .goals {
            margin-bottom: 1em;
            color: red;
        }
    </style>
</head>
<body>
    <!-- The scoreboard -->
    <div class="scoreboard" style="margin-bottom:0px; height: 10%; font-size:100%; text-align:center">
        Refferee for this match is: @Model.Referee.FirstName @Model.Referee.LastName
        <br />
        Stadium: @Model.Stadium.Name
    </div>
    <div class="scoreboard" style="margin-bottom: 0px; padding-bottom:0px; border-bottom: 0px;">
        <div id="minute">0</div>
    </div>
    <div class="scoreboard" style="margin-top: 0px; padding-top:0px; border-top: 0px;">
        <div class="team" id="team1">@Model.HomeTeam.NameOfTeam</div>
        <div class="score">0</div>
        <div> - </div>
        <div class="score">0</div>
        <div class="team" id="team2">@Model.AwayTeam.NameOfTeam</div>
    </div>

    <div class="event-column"></div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Select the event column
            const eventColumn = document.querySelector('.event-column');

            // Function to add a new event to the column
            function addEvent(eventText) {
                // Create a new event element
                const eventElement = document.createElement('div');
                const $team1 = $('.team1');
                const $team2 = $('.team2');
                const $team1Score = $('.score:eq(0)');
                const $team2Score = $('.score:eq(1)');
                eventElement.classList.add('event');
                if (eventText.includes(" scored a goal ")) {
                    console.log("Team 1 scored a goal!");
                    eventElement.classList.add('goal');
                    $team1Score.text(parseInt($team1Score.text()) + 1);
                }
                else {
                    if (eventText.includes(" scored goal")) {
                        console.log("Team 2 scored a goal!");
                        eventElement.classList.add('goals');
                        $team2Score.text(parseInt($team2Score.text()) + 1);
                    }
                }
                eventElement.textContent = eventText;

                // Add the event element to the column
                eventColumn.appendChild(eventElement);
            }

            function scoreGoal(team) {
                score += 1;
                team.textContent = score;
            }

            function incrementMinute() {
               if(minute < 90){
                    minute += 1;
                    minuteElement.textContent = `${minute}'`;
               }
               else{
                    minuteElement.textContent = `Full Time`;
               }
            }

            //addEvent function with a delay of 5 seconds for each event
            const events = @Html.Raw(Json.Serialize(ViewBag.Events));
            if (events && Array.isArray(events)) {
                let delay = 0;
                for (const event of events) {
                    setTimeout(() => {
                        addEvent(event);

                    }, delay);
                    delay += 5000;
                }
            } else {
                console.error('ViewBag.Events is not an array or is undefined/null');
            }

            //call incrementMinute function every second
            const minuteElement = document.querySelector('#minute');
            let minute = 0;
            setInterval(() => {
                incrementMinute();
            }, 1000);

        });
    </script>
</body>
</html>

// <auto-generated />
using System;
using FootballManager_v0._1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClientApplication.Migrations
{
    [DbContext(typeof(Models.FootballDatabaseContext))]
    [Migration("20230425134439_MyFirstUpdate")]
    partial class MyFirstUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FootballManager_v0._1.Models.Administrator", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.HasKey("AdminId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Award", b =>
                {
                    b.Property<int>("AwardId")
                        .HasColumnType("int")
                        .HasColumnName("award_id");

                    b.Property<string>("NameOfAward")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name_of_award");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("season");

                    b.HasKey("AwardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Formation", b =>
                {
                    b.Property<int>("FormationId")
                        .HasColumnType("int")
                        .HasColumnName("formation_id");

                    b.Property<string>("Formations")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("formations")
                        .IsFixedLength();

                    b.Property<string>("Tactics")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("tactics");

                    b.HasKey("FormationId");

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.League", b =>
                {
                    b.Property<int>("LeagueId")
                        .HasColumnType("int")
                        .HasColumnName("league_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("country")
                        .IsFixedLength();

                    b.Property<string>("LeagueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("league_name");

                    b.HasKey("LeagueId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("last_name");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("nationality");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int")
                        .HasColumnName("years_of_experience");

                    b.HasKey("ManagerId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .HasColumnType("int")
                        .HasColumnName("match_id");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int")
                        .HasColumnName("away_team_id");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int")
                        .HasColumnName("home_team_id");

                    b.Property<int>("RefereeId")
                        .HasColumnType("int")
                        .HasColumnName("referee_id");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("score");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int")
                        .HasColumnName("stadium_id");

                    b.HasKey("MatchId");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("RefereeId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnType("int")
                        .HasColumnName("news_id");

                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("post");

                    b.HasKey("NewsId");

                    b.HasIndex("AdminId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<int>("Attacking")
                        .HasColumnType("int")
                        .HasColumnName("attacking");

                    b.Property<int>("Defending")
                        .HasColumnType("int")
                        .HasColumnName("defending");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("last_name");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int")
                        .HasColumnName("league_id");

                    b.Property<int>("MidfieldControl")
                        .HasColumnType("int")
                        .HasColumnName("midfield_control");

                    b.Property<int>("OverallRank")
                        .HasColumnType("int")
                        .HasColumnName("overall_rank");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .HasColumnName("position")
                        .IsFixedLength();

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("team")
                        .IsFixedLength();

                    b.HasKey("PlayerId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Referee", b =>
                {
                    b.Property<int>("RefereeId")
                        .HasColumnType("int")
                        .HasColumnName("referee_id");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("last_name");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("nationality");

                    b.HasKey("RefereeId");

                    b.ToTable("Referees");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Scorer", b =>
                {
                    b.Property<int>("ScorerId")
                        .HasColumnType("int")
                        .HasColumnName("scorer_id");

                    b.Property<int>("NumberOfAssists")
                        .HasColumnType("int")
                        .HasColumnName("number_of_assists");

                    b.Property<int>("NumberOfGoals")
                        .HasColumnType("int")
                        .HasColumnName("number_of_goals");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.HasKey("ScorerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Scorers");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Squad", b =>
                {
                    b.Property<int>("SquadId")
                        .HasColumnType("int")
                        .HasColumnName("squad_id");

                    b.Property<string>("SquadName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("squad_name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("SquadId");

                    b.HasIndex("UserId");

                    b.ToTable("Squads");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Stadium", b =>
                {
                    b.Property<int>("StadiumId")
                        .HasColumnType("int")
                        .HasColumnName("stadium_id");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("city")
                        .IsFixedLength();

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("country")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("StadiumId");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Standing", b =>
                {
                    b.Property<int>("StandingsId")
                        .HasColumnType("int")
                        .HasColumnName("standings_id");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("int")
                        .HasColumnName("goals_against");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int")
                        .HasColumnName("goals_for");

                    b.Property<int>("MatchesDrawn")
                        .HasColumnType("int")
                        .HasColumnName("matches_drawn");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int")
                        .HasColumnName("matches_played");

                    b.Property<int>("MatchesWon")
                        .HasColumnType("int")
                        .HasColumnName("matches_won");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("StandingsId");

                    b.HasIndex("UserId");

                    b.ToTable("Standings");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.TeamContract", b =>
                {
                    b.Property<int>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("contract_id");

                    b.Property<bool>("IsCaptain")
                        .HasColumnType("bit")
                        .HasColumnName("is_captain");

                    b.Property<bool?>("IsFirstTeam")
                        .HasColumnType("bit")
                        .HasColumnName("is_first_team");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int>("ShirtNumber")
                        .HasColumnType("int")
                        .HasColumnName("shirt_number");

                    b.Property<int>("SquadId")
                        .HasColumnType("int")
                        .HasColumnName("squad_id");

                    b.HasKey("ContractId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SquadId");

                    b.ToTable("TeamContracts");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Transfer", b =>
                {
                    b.Property<int>("TransferId")
                        .HasColumnType("int")
                        .HasColumnName("transfer_id");

                    b.Property<int>("BuyingUserId")
                        .HasColumnType("int")
                        .HasColumnName("buying_user_id");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int>("SellingUserId")
                        .HasColumnType("int")
                        .HasColumnName("selling_user_id");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("date")
                        .HasColumnName("transfer_date");

                    b.Property<int>("TransferFee")
                        .HasColumnType("int")
                        .HasColumnName("transfer_fee");

                    b.HasKey("TransferId");

                    b.HasIndex("BuyingUserId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SellingUserId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("Coins")
                        .HasColumnType("int")
                        .HasColumnName("coins");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("NameOfTeam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name_of_team");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Award", b =>
                {
                    b.HasOne("FootballManager_v0._1.Models.Player", "Player")
                        .WithMany("Awards")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK_Awards_Players");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Match", b =>
                {
                    b.HasOne("FootballManager_v0._1.Models.User", "AwayTeam")
                        .WithMany("MatchAwayTeams")
                        .HasForeignKey("AwayTeamId")
                        .IsRequired()
                        .HasConstraintName("FK_Matches_Users_Awayteam");

                    b.HasOne("FootballManager_v0._1.Models.User", "HomeTeam")
                        .WithMany("MatchHomeTeams")
                        .HasForeignKey("HomeTeamId")
                        .IsRequired()
                        .HasConstraintName("FK_Matches_Users_Hometeam");

                    b.HasOne("FootballManager_v0._1.Models.Referee", "Referee")
                        .WithMany("Matches")
                        .HasForeignKey("RefereeId")
                        .IsRequired()
                        .HasConstraintName("FK_Matches_Referees");

                    b.HasOne("FootballManager_v0._1.Models.Stadium", "Stadium")
                        .WithMany("Matches")
                        .HasForeignKey("StadiumId")
                        .IsRequired()
                        .HasConstraintName("FK_Matches_Stadiums");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Referee");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.News", b =>
                {
                    b.HasOne("FootballManager_v0._1.Models.Administrator", "Admin")
                        .WithMany("News")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_News_Administrators");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Player", b =>
                {
                    b.HasOne("FootballManager_v0._1.Models.League", "League")
                        .WithMany("Players")
                        .HasForeignKey("LeagueId")
                        .IsRequired()
                        .HasConstraintName("FK_Players_Leagues");

                    b.Navigation("League");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Scorer", b =>
                {
                    b.HasOne("FootballManager_v0._1.Models.Player", "Player")
                        .WithMany("Scorers")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK_Scorers_Players");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Squad", b =>
                {
                    b.HasOne("FootballManager_v0._1.Models.User", "User")
                        .WithMany("Squads")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Squads_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Standing", b =>
                {
                    b.HasOne("FootballManager_v0._1.Models.User", "User")
                        .WithMany("Standings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Standings_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.TeamContract", b =>
                {
                    b.HasOne("FootballManager_v0._1.Models.Player", "Player")
                        .WithMany("TeamContracts")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK_Squad_players_Players");

                    b.HasOne("FootballManager_v0._1.Models.Squad", "Squad")
                        .WithMany("TeamContracts")
                        .HasForeignKey("SquadId")
                        .IsRequired()
                        .HasConstraintName("FK_Squad_players_Squads1");

                    b.Navigation("Player");

                    b.Navigation("Squad");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Transfer", b =>
                {
                    b.HasOne("FootballManager_v0._1.Models.User", "BuyingUser")
                        .WithMany("TransferBuyingUsers")
                        .HasForeignKey("BuyingUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Transfers_Users_Buying");

                    b.HasOne("FootballManager_v0._1.Models.Player", "Player")
                        .WithMany("Transfers")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK_Transfers_Players");

                    b.HasOne("FootballManager_v0._1.Models.User", "SellingUser")
                        .WithMany("TransferSellingUsers")
                        .HasForeignKey("SellingUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Transfers_Users_Selling");

                    b.Navigation("BuyingUser");

                    b.Navigation("Player");

                    b.Navigation("SellingUser");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Administrator", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.League", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Player", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Scorers");

                    b.Navigation("TeamContracts");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Referee", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Squad", b =>
                {
                    b.Navigation("TeamContracts");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.Stadium", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("FootballManager_v0._1.Models.User", b =>
                {
                    b.Navigation("MatchAwayTeams");

                    b.Navigation("MatchHomeTeams");

                    b.Navigation("Squads");

                    b.Navigation("Standings");

                    b.Navigation("TransferBuyingUsers");

                    b.Navigation("TransferSellingUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
